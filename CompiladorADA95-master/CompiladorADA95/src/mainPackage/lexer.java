/* The following code was generated by JFlex 1.6.1 */

package mainPackage;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./src/mainPackage/lexer.flex</tt>
 */
class lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\2\1\11\1\12\1\1\16\5\4\0\1\41\1\0"+
    "\1\62\1\55\1\4\1\0\1\56\1\24\1\52\1\53\1\51\1\50"+
    "\1\54\1\25\1\57\1\45\1\6\11\7\1\43\1\60\1\46\1\44"+
    "\1\47\2\0\1\21\1\40\1\33\1\34\1\17\1\20\1\27\1\35"+
    "\1\37\2\4\1\22\1\42\1\30\1\32\1\26\1\4\1\15\1\23"+
    "\1\14\1\16\1\4\1\31\1\36\2\4\1\0\1\61\2\0\1\10"+
    "\1\0\1\21\1\40\1\33\1\34\1\17\1\20\1\27\1\35\1\37"+
    "\2\4\1\22\1\42\1\30\1\32\1\26\1\4\1\15\1\23\1\14"+
    "\1\16\1\4\1\31\1\36\2\4\4\0\6\5\1\13\32\5\2\0"+
    "\4\4\4\0\1\4\2\0\1\5\7\0\1\4\4\0\1\4\5\0"+
    "\27\4\1\0\37\4\1\0\70\4\2\37\115\4\1\23\u0142\4\4\0"+
    "\14\4\16\0\5\4\7\0\1\4\1\0\1\4\21\0\160\5\5\4"+
    "\1\0\2\4\2\0\4\4\10\0\1\4\1\0\3\4\1\0\1\4"+
    "\1\0\24\4\1\0\123\4\1\0\213\4\1\0\5\5\2\0\236\4"+
    "\11\0\46\4\2\0\1\4\7\0\47\4\11\0\55\5\1\0\1\5"+
    "\1\0\2\5\1\0\2\5\1\0\1\5\10\0\33\4\5\0\3\4"+
    "\15\0\4\5\7\0\1\4\4\0\13\5\5\0\53\4\37\5\4\0"+
    "\2\4\1\5\143\4\1\0\1\4\10\5\1\0\6\5\2\4\2\5"+
    "\1\0\4\5\2\4\12\5\3\4\2\0\1\4\17\0\1\5\1\4"+
    "\1\5\36\4\33\5\2\0\131\4\13\5\1\4\16\0\12\5\41\4"+
    "\11\5\2\4\4\0\1\4\5\0\26\4\4\5\1\4\11\5\1\4"+
    "\3\5\1\4\5\5\22\0\31\4\3\5\244\0\4\5\66\4\3\5"+
    "\1\4\22\5\1\4\7\5\12\4\2\5\2\0\12\5\1\0\7\4"+
    "\1\0\7\4\1\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\5\1\4\7\5"+
    "\2\0\2\5\2\0\3\5\1\4\10\0\1\5\4\0\2\4\1\0"+
    "\3\4\2\5\2\0\12\5\4\4\7\0\1\4\5\0\3\5\1\0"+
    "\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\2\4\1\0\2\4\2\0\1\5\1\0\5\5\4\0\2\5\2\0"+
    "\3\5\3\0\1\5\7\0\4\4\1\0\1\4\7\0\14\5\3\4"+
    "\1\5\13\0\3\5\1\0\11\4\1\0\3\4\1\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\10\5\1\0"+
    "\3\5\1\0\3\5\2\0\1\4\17\0\2\4\2\5\2\0\12\5"+
    "\1\0\1\4\17\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\7\5"+
    "\2\0\2\5\2\0\3\5\10\0\2\5\4\0\2\4\1\0\3\4"+
    "\2\5\2\0\12\5\1\0\1\4\20\0\1\5\1\4\1\0\6\4"+
    "\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4"+
    "\3\0\2\4\3\0\3\4\3\0\14\4\4\0\5\5\3\0\3\5"+
    "\1\0\4\5\2\0\1\4\6\0\1\5\16\0\12\5\11\0\1\4"+
    "\7\0\3\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4"+
    "\1\0\5\4\3\0\1\4\7\5\1\0\3\5\1\0\4\5\7\0"+
    "\2\5\1\0\2\4\6\0\2\4\2\5\2\0\12\5\22\0\2\5"+
    "\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4"+
    "\2\0\1\5\1\4\7\5\1\0\3\5\1\0\4\5\7\0\2\5"+
    "\7\0\1\4\1\0\2\4\2\5\2\0\12\5\1\0\2\4\17\0"+
    "\2\5\1\0\10\4\1\0\3\4\1\0\51\4\2\0\1\4\7\5"+
    "\1\0\3\5\1\0\4\5\1\4\10\0\1\5\10\0\2\4\2\5"+
    "\2\0\12\5\12\0\6\4\2\0\2\5\1\0\22\4\3\0\30\4"+
    "\1\0\11\4\1\0\1\4\2\0\7\4\3\0\1\5\4\0\6\5"+
    "\1\0\1\5\1\0\10\5\22\0\2\5\15\0\60\4\1\5\2\4"+
    "\7\5\4\0\10\4\10\5\1\0\12\5\47\0\2\4\1\0\1\4"+
    "\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4"+
    "\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4"+
    "\1\5\2\4\6\5\1\0\2\5\1\4\2\0\5\4\1\0\1\4"+
    "\1\0\6\5\2\0\12\5\2\0\2\4\42\0\1\4\27\0\2\5"+
    "\6\0\12\5\13\0\1\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\10\4\1\0\44\4\4\0\24\5\1\0\2\5\5\4\13\5\1\0"+
    "\44\5\11\0\1\5\71\0\53\4\24\5\1\4\12\5\6\0\6\4"+
    "\4\5\4\4\3\5\1\4\3\5\2\4\7\5\3\4\4\5\15\4"+
    "\14\5\1\4\17\5\2\0\46\4\12\0\53\4\1\0\1\4\3\0"+
    "\u0149\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0"+
    "\51\4\1\0\4\4\2\0\41\4\1\0\4\4\2\0\7\4\1\0"+
    "\1\4\1\0\4\4\2\0\17\4\1\0\71\4\1\0\4\4\2\0"+
    "\103\4\2\0\3\5\40\0\20\4\20\0\125\4\14\0\u026c\4\2\0"+
    "\21\4\1\0\32\4\5\0\113\4\3\0\3\4\17\0\15\4\1\0"+
    "\4\4\3\5\13\0\22\4\3\5\13\0\22\4\2\5\14\0\15\4"+
    "\1\0\3\4\1\0\2\5\14\0\64\4\40\5\3\0\1\4\3\0"+
    "\2\4\1\5\2\0\12\5\41\0\3\5\2\0\12\5\6\0\130\4"+
    "\10\0\51\4\1\5\1\4\5\0\106\4\12\0\35\4\3\0\14\5"+
    "\4\0\14\5\12\0\12\5\36\4\2\0\5\4\13\0\54\4\4\0"+
    "\21\5\7\4\2\5\6\0\12\5\46\0\27\4\5\5\4\0\65\4"+
    "\12\5\1\0\35\5\2\0\13\5\6\0\12\5\15\0\1\4\130\0"+
    "\5\5\57\4\21\5\7\4\4\0\12\5\21\0\11\5\14\0\3\5"+
    "\36\4\12\5\3\0\2\4\12\5\6\0\46\4\16\5\14\0\44\4"+
    "\24\5\10\0\12\5\3\0\3\4\12\5\44\4\122\0\3\5\1\0"+
    "\25\5\4\4\1\5\4\4\1\5\15\0\300\4\47\5\25\0\4\5"+
    "\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0"+
    "\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0"+
    "\6\4\4\0\15\4\5\0\3\4\1\0\7\4\16\0\5\5\30\0"+
    "\1\11\1\11\5\5\20\0\2\4\23\0\1\4\13\0\5\5\5\0"+
    "\6\5\1\0\1\4\15\0\1\4\20\0\15\4\3\0\32\4\26\0"+
    "\15\5\4\0\1\5\3\0\14\5\21\0\1\4\4\0\1\4\2\0"+
    "\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0"+
    "\1\4\21\0\51\4\u0a77\0\57\4\1\0\57\4\1\0\205\4\6\0"+
    "\4\4\3\5\16\0\46\4\12\0\66\4\11\0\1\4\17\0\1\5"+
    "\27\4\11\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\40\5\57\0"+
    "\1\4\u01d5\0\3\4\31\0\11\4\6\5\1\0\5\4\2\0\5\4"+
    "\4\0\126\4\2\0\2\5\2\0\3\4\1\0\132\4\1\0\4\4"+
    "\5\0\51\4\3\0\136\4\21\0\33\4\65\0\20\4\u0200\0\u19b6\4"+
    "\112\0\u51cc\4\64\0\u048d\4\103\0\56\4\2\0\u010d\4\3\0\20\4"+
    "\12\5\2\4\24\0\57\4\1\5\14\0\2\5\1\0\31\4\10\0"+
    "\120\4\2\5\45\0\11\4\2\0\147\4\2\0\4\4\1\0\2\4"+
    "\16\0\12\4\120\0\10\4\1\5\3\4\1\5\4\4\1\5\27\4"+
    "\5\5\20\0\1\4\7\0\64\4\14\0\2\5\62\4\21\5\13\0"+
    "\12\5\6\0\22\5\6\4\3\0\1\4\4\0\12\5\34\4\10\5"+
    "\2\0\27\4\15\5\14\0\35\4\3\0\4\5\57\4\16\5\16\0"+
    "\1\4\12\5\46\0\51\4\16\5\11\0\3\4\1\5\10\4\2\5"+
    "\2\0\12\5\6\0\27\4\3\0\1\4\1\5\4\0\60\4\1\5"+
    "\1\4\3\5\2\4\2\5\5\4\2\5\1\4\1\5\1\4\30\0"+
    "\3\4\43\0\6\4\2\0\6\4\2\0\6\4\11\0\7\4\1\0"+
    "\7\4\221\0\43\4\10\5\1\0\2\5\2\0\12\5\6\0\u2ba4\4"+
    "\14\0\27\4\4\0\61\4\u2104\0\u012e\4\2\0\76\4\2\0\152\4"+
    "\46\0\7\4\14\0\5\4\5\0\1\4\1\5\12\4\1\0\15\4"+
    "\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4"+
    "\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4\3\0\20\5"+
    "\20\0\7\5\14\0\2\4\30\0\3\4\31\0\1\4\6\0\5\4"+
    "\1\0\207\4\2\0\1\5\4\0\1\4\13\0\12\5\7\0\32\4"+
    "\4\0\1\4\1\0\32\4\13\0\131\4\3\0\6\4\2\0\6\4"+
    "\2\0\6\4\2\0\3\4\3\0\2\4\3\0\2\4\22\0\3\5"+
    "\4\0\14\4\1\0\32\4\1\0\23\4\1\0\2\4\1\0\17\4"+
    "\2\0\16\4\42\0\173\4\105\0\65\4\210\0\1\5\202\0\35\4"+
    "\3\0\61\4\57\0\37\4\21\0\33\4\65\0\36\4\2\0\44\4"+
    "\4\0\10\4\1\0\5\4\52\0\236\4\2\0\12\5\u0356\0\6\4"+
    "\2\0\1\4\1\0\54\4\1\0\2\4\3\0\1\4\2\0\27\4"+
    "\252\0\26\4\12\0\32\4\306\0\1\4\3\5\1\0\2\5\5\0"+
    "\4\5\4\4\1\0\3\4\1\0\33\4\4\0\3\5\4\0\1\5"+
    "\40\0\35\4\203\0\66\4\12\0\26\4\12\0\23\4\215\0\111\4"+
    "\u03b7\0\3\5\65\4\17\5\37\0\12\5\20\0\3\5\55\4\13\5"+
    "\2\0\1\5\u0f42\0\u036f\4\221\0\143\4\u0b9d\0\u042f\4\u33d1\0\u0239\4"+
    "\u45c7\0\2\4\u2163\0\5\5\3\0\26\5\2\0\7\5\36\0\4\5"+
    "\224\0\3\5\u01bb\0\125\4\1\0\107\4\1\0\2\4\2\0\1\4"+
    "\2\0\2\4\2\0\4\4\1\0\14\4\1\0\1\4\1\0\7\4"+
    "\1\0\101\4\1\0\4\4\2\0\10\4\1\0\7\4\1\0\34\4"+
    "\1\0\4\4\1\0\5\4\1\0\1\4\3\0\7\4\1\0\u0154\4"+
    "\2\0\31\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4"+
    "\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4\1\0\31\4"+
    "\1\0\10\4\2\0\62\5\u2800\0\ua6d7\4\51\0\u1035\4\13\0\336\4"+
    "\u3fe2\0\u021e\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\5\36\0\140\5\200\0\360\5\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\7\2\1\5\1\6"+
    "\11\2\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\0\1\4\13\2\1\0\1\31"+
    "\11\2\1\32\2\2\1\33\1\34\1\35\1\36\3\2"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\2\3\2\2\1\51\1\2\1\52\3\2"+
    "\1\53\1\54\1\2\1\55\2\31\1\2\1\56\1\57"+
    "\2\2\1\60\1\61\3\2\1\62\2\2\1\0\2\2"+
    "\1\63\1\64\1\2\1\65\1\66\2\2\1\67\1\2"+
    "\1\70\1\71\1\72\1\2\1\73\2\2\1\0\4\2"+
    "\1\74\1\2\1\75\2\2\1\0\1\76\1\2\1\77"+
    "\4\2\1\100\3\2\1\101\1\102\1\103\1\104\1\2"+
    "\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\u04c8\0\u04fb\0\231\0\u052e\0\u0561\0\u0594\0\231\0\u05c7"+
    "\0\231\0\231\0\231\0\231\0\231\0\u05fa\0\231\0\231"+
    "\0\u062d\0\u0660\0\231\0\u0693\0\u06c6\0\u06c6\0\u06f9\0\u072c"+
    "\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4"+
    "\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c"+
    "\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\314\0\u0b5b\0\u0b8e\0\314"+
    "\0\314\0\314\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\231\0\231"+
    "\0\231\0\231\0\231\0\231\0\231\0\231\0\231\0\231"+
    "\0\u0c8d\0\u06c6\0\u0cc0\0\u0cf3\0\314\0\u0d26\0\314\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\314\0\314\0\u0df2\0\231\0\u0e25\0\231"+
    "\0\u0e58\0\314\0\314\0\u0e8b\0\u0ebe\0\314\0\314\0\u0ef1"+
    "\0\u0f24\0\u0f57\0\314\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056"+
    "\0\314\0\314\0\u1089\0\314\0\314\0\u10bc\0\u10ef\0\314"+
    "\0\u1122\0\314\0\314\0\314\0\u1155\0\314\0\u1188\0\u11bb"+
    "\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\314\0\u12ed\0\314"+
    "\0\u1320\0\u1353\0\u1386\0\314\0\u13b9\0\314\0\u13ec\0\u141f"+
    "\0\u1452\0\u1485\0\231\0\u14b8\0\u14eb\0\u151e\0\314\0\314"+
    "\0\314\0\314\0\u1551\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\2\4\1\5\1\0\1\6\1\7\1\5"+
    "\1\0\1\4\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\5\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\5\1\26\2\5\1\27\1\30\1\4"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\0"+
    "\1\50\1\51\2\0\56\51\1\52\1\53\2\0\1\4"+
    "\147\0\5\5\2\0\11\5\2\0\13\5\1\0\1\5"+
    "\20\0\1\54\2\0\3\54\2\55\1\54\3\0\50\54"+
    "\2\0\3\54\2\56\1\54\3\0\47\54\4\0\5\5"+
    "\2\0\11\5\2\0\7\5\1\57\3\5\1\0\1\5"+
    "\24\0\5\5\2\0\4\5\1\60\4\5\2\0\13\5"+
    "\1\0\1\5\24\0\5\5\2\0\10\5\1\61\2\0"+
    "\13\5\1\0\1\5\24\0\5\5\2\0\7\5\1\62"+
    "\1\5\2\0\2\5\1\63\5\5\1\64\2\5\1\0"+
    "\1\5\24\0\5\5\2\0\3\5\1\65\3\5\1\66"+
    "\1\5\2\0\4\5\1\67\6\5\1\0\1\5\24\0"+
    "\5\5\2\0\11\5\2\0\2\5\1\70\10\5\1\0"+
    "\1\5\24\0\5\5\2\0\11\5\2\0\4\5\1\71"+
    "\6\5\1\0\1\5\20\0\1\72\2\0\6\72\3\0"+
    "\47\72\25\0\1\73\41\0\5\5\2\0\2\5\1\74"+
    "\1\75\5\5\2\0\13\5\1\0\1\5\24\0\5\5"+
    "\2\0\4\5\1\76\4\5\2\0\4\5\1\77\6\5"+
    "\1\0\1\5\24\0\5\5\2\0\3\5\1\100\1\101"+
    "\4\5\2\0\4\5\1\102\6\5\1\0\1\5\24\0"+
    "\5\5\2\0\11\5\2\0\7\5\1\103\1\5\1\104"+
    "\1\5\1\0\1\5\24\0\5\5\2\0\2\5\1\105"+
    "\1\106\5\5\2\0\13\5\1\0\1\5\24\0\5\5"+
    "\2\0\4\5\1\107\4\5\2\0\4\5\1\110\6\5"+
    "\1\0\1\5\24\0\5\5\2\0\5\5\1\111\2\5"+
    "\1\112\2\0\2\5\1\113\10\5\1\0\1\5\24\0"+
    "\5\5\2\0\4\5\1\114\4\5\2\0\4\5\1\115"+
    "\6\5\1\0\1\5\24\0\5\5\2\0\11\5\2\0"+
    "\4\5\1\116\6\5\1\0\1\5\64\0\1\117\62\0"+
    "\1\120\62\0\1\121\62\0\1\122\67\0\1\123\70\0"+
    "\1\124\3\0\1\51\2\0\56\51\16\0\1\125\1\126"+
    "\12\0\1\127\31\0\1\130\6\0\2\131\53\0\1\54"+
    "\2\0\3\54\2\132\1\54\3\0\47\54\4\0\5\5"+
    "\2\0\4\5\1\133\4\5\2\0\13\5\1\0\1\5"+
    "\24\0\5\5\2\0\1\5\1\134\7\5\2\0\13\5"+
    "\1\0\1\5\24\0\5\5\2\0\4\5\1\135\4\5"+
    "\2\0\13\5\1\0\1\5\24\0\5\5\2\0\10\5"+
    "\1\136\2\0\13\5\1\0\1\5\24\0\5\5\2\0"+
    "\11\5\2\0\6\5\1\137\4\5\1\0\1\5\24\0"+
    "\5\5\2\0\11\5\2\0\11\5\1\140\1\5\1\0"+
    "\1\5\24\0\5\5\2\0\11\5\2\0\2\5\1\141"+
    "\10\5\1\0\1\5\24\0\5\5\2\0\11\5\2\0"+
    "\4\5\1\142\6\5\1\0\1\5\24\0\5\5\2\0"+
    "\2\5\1\143\6\5\2\0\13\5\1\0\1\5\24\0"+
    "\5\5\2\0\11\5\2\0\6\5\1\144\4\5\1\0"+
    "\1\5\24\0\5\5\2\0\11\5\2\0\4\5\1\145"+
    "\6\5\1\0\1\5\44\0\1\146\36\0\1\73\1\147"+
    "\1\150\60\73\4\0\5\5\2\0\11\5\2\0\4\5"+
    "\1\151\6\5\1\0\1\5\24\0\5\5\2\0\1\5"+
    "\1\152\7\5\2\0\13\5\1\0\1\5\24\0\5\5"+
    "\2\0\1\5\1\153\7\5\2\0\13\5\1\0\1\5"+
    "\24\0\5\5\2\0\1\5\1\154\7\5\2\0\13\5"+
    "\1\0\1\5\24\0\5\5\2\0\7\5\1\155\1\5"+
    "\2\0\13\5\1\0\1\5\24\0\5\5\2\0\11\5"+
    "\2\0\3\5\1\156\7\5\1\0\1\5\24\0\5\5"+
    "\2\0\1\5\1\157\7\5\2\0\13\5\1\0\1\5"+
    "\24\0\5\5\2\0\4\5\1\160\4\5\2\0\11\5"+
    "\1\161\1\5\1\0\1\5\24\0\5\5\2\0\1\5"+
    "\1\162\7\5\2\0\13\5\1\0\1\5\24\0\5\5"+
    "\2\0\1\5\1\163\7\5\2\0\13\5\1\0\1\5"+
    "\24\0\5\5\2\0\11\5\2\0\5\5\1\164\5\5"+
    "\1\0\1\5\24\0\5\5\2\0\1\5\1\165\7\5"+
    "\2\0\13\5\1\166\1\5\24\0\5\5\2\0\11\5"+
    "\2\0\1\5\1\167\11\5\1\0\1\5\24\0\5\5"+
    "\2\0\11\5\2\0\4\5\1\170\6\5\1\0\1\5"+
    "\24\0\5\5\2\0\11\5\2\0\6\5\1\171\4\5"+
    "\1\0\1\5\26\0\2\131\1\54\56\0\5\5\2\0"+
    "\11\5\2\0\2\5\1\172\10\5\1\0\1\5\24\0"+
    "\5\5\2\0\3\5\1\173\5\5\2\0\13\5\1\0"+
    "\1\5\24\0\5\5\2\0\4\5\1\174\4\5\2\0"+
    "\13\5\1\0\1\5\24\0\5\5\2\0\1\5\1\175"+
    "\7\5\2\0\13\5\1\0\1\5\24\0\5\5\2\0"+
    "\11\5\2\0\5\5\1\176\5\5\1\0\1\5\24\0"+
    "\5\5\2\0\6\5\1\177\2\5\2\0\13\5\1\0"+
    "\1\5\24\0\5\5\2\0\11\5\2\0\1\200\12\5"+
    "\1\0\1\5\22\0\1\150\64\0\5\5\2\0\11\5"+
    "\2\0\5\5\1\201\5\5\1\0\1\5\24\0\5\5"+
    "\2\0\11\5\2\0\4\5\1\202\6\5\1\0\1\5"+
    "\24\0\5\5\2\0\7\5\1\203\1\5\2\0\13\5"+
    "\1\0\1\5\24\0\5\5\2\0\11\5\2\0\2\5"+
    "\1\204\10\5\1\0\1\5\24\0\5\5\2\0\7\5"+
    "\1\205\1\5\2\0\13\5\1\0\1\5\24\0\5\5"+
    "\2\0\11\5\2\0\7\5\1\206\3\5\1\0\1\5"+
    "\24\0\5\5\2\0\7\5\1\207\1\5\2\0\13\5"+
    "\1\0\1\5\24\0\5\5\2\0\4\5\1\210\4\5"+
    "\2\0\13\5\1\0\1\5\52\0\1\211\34\0\5\5"+
    "\2\0\11\5\2\0\11\5\1\212\1\5\1\0\1\5"+
    "\24\0\5\5\2\0\7\5\1\213\1\5\2\0\13\5"+
    "\1\0\1\5\24\0\5\5\2\0\2\5\1\214\6\5"+
    "\2\0\13\5\1\0\1\5\24\0\5\5\2\0\1\5"+
    "\1\215\7\5\2\0\13\5\1\0\1\5\24\0\5\5"+
    "\2\0\1\5\1\216\7\5\2\0\13\5\1\0\1\5"+
    "\24\0\5\5\2\0\4\5\1\217\4\5\2\0\13\5"+
    "\1\0\1\5\24\0\5\5\2\0\4\5\1\220\4\5"+
    "\2\0\13\5\1\0\1\5\24\0\5\5\2\0\6\5"+
    "\1\221\2\5\2\0\13\5\1\0\1\5\24\0\5\5"+
    "\2\0\11\5\2\0\1\5\1\222\11\5\1\0\1\5"+
    "\36\0\1\223\50\0\5\5\2\0\11\5\2\0\2\5"+
    "\1\224\10\5\1\0\1\5\24\0\5\5\2\0\4\5"+
    "\1\225\4\5\2\0\13\5\1\0\1\5\24\0\5\5"+
    "\2\0\11\5\2\0\2\5\1\226\10\5\1\0\1\5"+
    "\24\0\5\5\2\0\11\5\2\0\11\5\1\227\1\5"+
    "\1\0\1\5\24\0\5\5\2\0\11\5\2\0\6\5"+
    "\1\230\4\5\1\0\1\5\24\0\5\5\2\0\2\5"+
    "\1\231\6\5\2\0\13\5\1\0\1\5\24\0\5\5"+
    "\2\0\4\5\1\232\4\5\2\0\13\5\1\0\1\5"+
    "\34\0\1\233\52\0\5\5\2\0\6\5\1\234\2\5"+
    "\2\0\13\5\1\0\1\5\24\0\5\5\2\0\11\5"+
    "\2\0\4\5\1\235\6\5\1\0\1\5\24\0\5\5"+
    "\2\0\3\5\1\236\5\5\2\0\13\5\1\0\1\5"+
    "\24\0\5\5\2\0\4\5\1\237\4\5\2\0\13\5"+
    "\1\0\1\5\24\0\5\5\2\0\2\5\1\240\6\5"+
    "\2\0\13\5\1\0\1\5\24\0\5\5\2\0\11\5"+
    "\2\0\2\5\1\241\10\5\1\0\1\5\24\0\5\5"+
    "\2\0\11\5\2\0\2\5\1\242\10\5\1\0\1\5"+
    "\24\0\5\5\2\0\2\5\1\243\6\5\2\0\13\5"+
    "\1\0\1\5\24\0\5\5\2\0\4\5\1\244\4\5"+
    "\2\0\13\5\1\0\1\5\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5508];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\26\1\1\11\3\1\1\11\1\1"+
    "\5\11\1\1\2\11\2\1\1\11\2\0\14\1\1\0"+
    "\24\1\12\11\15\1\1\11\1\1\1\11\15\1\1\0"+
    "\22\1\1\0\11\1\1\0\7\1\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2664) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 70: break;
          case 2: 
            { System.out.println("<ID, \"" + yytext() + "\">"); return 1;
            }
          case 71: break;
          case 3: 
            { System.out.println("<Float, \"" + yytext() + "\">"); return 1;
            }
          case 72: break;
          case 4: 
            { System.out.println("<Num, \"" + yytext() + "\">"); return 1;
            }
          case 73: break;
          case 5: 
            { System.out.println("<Apostrofe>"); return 1;
            }
          case 74: break;
          case 6: 
            { System.out.println("<OpResta, \"-\">"); return 1;
            }
          case 75: break;
          case 7: 
            { System.out.println("<Dos Puntos>"); return 1;
            }
          case 76: break;
          case 8: 
            { System.out.println("<OpRel, \"=\">"); return 1;
            }
          case 77: break;
          case 9: 
            { System.out.println("<OpDiv, \"/\">"); return 1;
            }
          case 78: break;
          case 10: 
            { System.out.println("<OpRel, \"<\">"); return 1;
            }
          case 79: break;
          case 11: 
            { System.out.println("<OpRel, \">\">"); return 1;
            }
          case 80: break;
          case 12: 
            { System.out.println("<OpSuma, \"+\">"); return 1;
            }
          case 81: break;
          case 13: 
            { System.out.println("<OpMult, \"*\">"); return 1;
            }
          case 82: break;
          case 14: 
            { System.out.println("<ABREPARENTESIS>"); return 1;
            }
          case 83: break;
          case 15: 
            { System.out.println("<CIERRAPARENTESIS>"); return 1;
            }
          case 84: break;
          case 16: 
            { System.out.println("<Coma>"); return 1;
            }
          case 85: break;
          case 17: 
            { System.out.println("<Numeral>"); return 1;
            }
          case 86: break;
          case 18: 
            { System.out.println("<OpConcat>"); return 1;
            }
          case 87: break;
          case 19: 
            { System.out.println("<Punto>"); return 1;
            }
          case 88: break;
          case 20: 
            { System.out.println("<PuntoComa>" + " Linea: "+yyline+" Columna"+yycolumn); return 1;
            }
          case 89: break;
          case 21: 
            { string.setLength(0); yybegin(STRING);
            }
          case 90: break;
          case 22: 
            { string.append( yytext() );
            }
          case 91: break;
          case 23: 
            { string.append('\\');
            }
          case 92: break;
          case 24: 
            { yybegin(YYINITIAL); System.out.println("<String, \"" + string.toString() + "\">"); return 1;
            }
          case 93: break;
          case 25: 
            { System.out.println("<Comentario>");
            }
          case 94: break;
          case 26: 
            { System.out.println("<OpBool, \"or\">"); return 1;
            }
          case 95: break;
          case 27: 
            { System.out.println("<Do>"); return 1;
            }
          case 96: break;
          case 28: 
            { System.out.println("<If>"); return 1;
            }
          case 97: break;
          case 29: 
            { System.out.println("<Is>"); return 1;
            }
          case 98: break;
          case 30: 
            { System.out.println("<In>"); return 1;
            }
          case 99: break;
          case 31: 
            { System.out.println("<Asig, \":=\">"); return 1;
            }
          case 100: break;
          case 32: 
            { System.out.println("<OpRel, \"/=\">"); return 1;
            }
          case 101: break;
          case 33: 
            { System.out.println("<OpRel, \"<=\">"); return 1;
            }
          case 102: break;
          case 34: 
            { System.out.println("<OpRel, \">=\">"); return 1;
            }
          case 103: break;
          case 35: 
            { System.out.println("<OpExp, \"**\">"); return 1;
            }
          case 104: break;
          case 36: 
            { System.out.println("<Rango>"); return 1;
            }
          case 105: break;
          case 37: 
            { string.append('\t');
            }
          case 106: break;
          case 38: 
            { string.append('\r');
            }
          case 107: break;
          case 39: 
            { string.append('\n');
            }
          case 108: break;
          case 40: 
            { string.append('\"');
            }
          case 109: break;
          case 41: 
            { System.out.println("<Use>"); return 1;
            }
          case 110: break;
          case 42: 
            { System.out.println("<End>"); return 1;
            }
          case 111: break;
          case 43: 
            { System.out.println("<For>"); return 1;
            }
          case 112: break;
          case 44: 
            { System.out.println("<OpBool, \"and\">"); return 1;
            }
          case 113: break;
          case 45: 
            { System.out.println("<Caracter, \""+yytext()+"\">");
            }
          case 114: break;
          case 46: 
            { System.out.println("<Put>"); return 1;
            }
          case 115: break;
          case 47: 
            { System.out.println("<Get>"); return 1;
            }
          case 116: break;
          case 48: 
            { System.out.println("<New>"); return 1;
            }
          case 117: break;
          case 49: 
            { System.out.println("<OpBool, \"not\">"); return 1;
            }
          case 118: break;
          case 50: 
            { System.out.println("<Out>"); return 1;
            }
          case 119: break;
          case 51: 
            { System.out.println("<Mod>"); return 1;
            }
          case 120: break;
          case 52: 
            { System.out.println("<Then>"); return 1;
            }
          case 121: break;
          case 53: 
            { System.out.println("<Else>"); return 1;
            }
          case 122: break;
          case 54: 
            { System.out.println("<Exit>"); return 1;
            }
          case 123: break;
          case 55: 
            { System.out.println("<Loop>"); return 1;
            }
          case 124: break;
          case 56: 
            { System.out.println("<Goto>"); return 1;
            }
          case 125: break;
          case 57: 
            { System.out.println("<Null>"); return 1;
            }
          case 126: break;
          case 58: 
            { System.out.println("<When>"); return 1;
            }
          case 127: break;
          case 59: 
            { System.out.println("<With>"); return 1;
            }
          case 128: break;
          case 60: 
            { System.out.println("<Float>"); return 1;
            }
          case 129: break;
          case 61: 
            { System.out.println("<While>"); return 1;
            }
          case 130: break;
          case 62: 
            { System.out.println("<Begin>"); return 1;
            }
          case 131: break;
          case 63: 
            { System.out.println("<Return>"); return 1;
            }
          case 132: break;
          case 64: 
            { System.out.println("<In_Out>"); return 1;
            }
          case 133: break;
          case 65: 
            { System.out.println("<Declare>"); return 1;
            }
          case 134: break;
          case 66: 
            { System.out.println("<Integer>"); return 1;
            }
          case 135: break;
          case 67: 
            { System.out.println("<Boolean>"); return 1;
            }
          case 136: break;
          case 68: 
            { System.out.println("<Function>"); return 1;
            }
          case 137: break;
          case 69: 
            { System.out.println("<Procedure>"); return 1;
            }
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
